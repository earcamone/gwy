name: 'Vulnerabilities Scan'
description: 'Scans for vulnerabilities in branch'

outputs:
  result:
    description: 'Result of the action (success or failed)'
    value: ${{ steps.check-vulnerabilities.outputs.result }}

runs:
  using: 'composite'
  steps:
    - name: Initialize Vulnerabilities Scanning Environment
      shell: bash
      run: |
        # Initialize Vulnerabilities Scanning Environment
        GWY_SUMMARY=$RUNNER_TEMP/summary.txt
        echo -e "## Code Vulnerabilities Scan\n" >> $GWY_SUMMARY

        echo "GWY_SUMMARY=$GWY_SUMMARY" >> $GITHUB_ENV
        echo "GWY_VULNERABILITIES_COUNT=0" >> $GITHUB_ENV
        echo "GWY_ARTIFACT=$RUNNER_TEMP/vulnerabilities-report.txt" >> $GITHUB_ENV

        # set annotations reusable title        
        echo "GWY_TITLE=vulnerabilities scan" >> $GITHUB_ENV        
        
        sync

    - name: Install govulncheck
      run: |
        # Installing govulncheck for Vulnerabilities Scanning
        go install golang.org/x/vuln/cmd/govulncheck@latest
      shell: bash

    - name: Check Vulnerabilities
      id: check-vulnerabilities

      # allow pipeline to keep going on errors (+e)
      shell: bash --noprofile --norc +e -o pipefail {0}
      run: |
        # Check Code Vulnerabilities
        timeout $GWY_TIMEOUT_SECONDS govulncheck ./... | grep -v "show verbose" |
          grep -v "Symbol Results" > $GWY_ARTIFACT
                
        # process found vulnerabilities IDs
        GWY_VULNERABILITIES_FOUND=$(cat $GWY_ARTIFACT | grep 'Vulnerability #')
      
        # process found vulnerabilities count
        GWY_VULNERABILITIES_COUNT=$(echo "$GWY_VULNERABILITIES_FOUND" | wc -l)
        
        # set action result based in outdated dependencies count
        if [ "$GWY_VULNERABILITIES_COUNT" -ne 0 ]; then
          echo "result=failed" >> $GITHUB_OUTPUT
        else
          echo "result=success" >> $GITHUB_OUTPUT
        fi
        
        # enhance vulnerabilities summary section, 
        # annotations and debug output with results
        
        if [ $GWY_VULNERABILITIES_COUNT -ne 0 ]; then
          # add found vulnerabilities annotation
          echo "::error title=$GWY_TITLE: $GWY_VULNERABILITIES_COUNT VULNERABILITIES FOUND::check summary or artifact report for more more details"
        
          # add found vulnerabilities to debug output
          echo "$GWY_VULNERABILITIES_FOUND"
          
          # add found vulnerabilities to action summary
          #echo "$GWY_VULNERABILITIES_FOUND" | sed 's/^/  - /' >> $GWY_SUMMARY
        
          # Loop through the file line by line
          while IFS= read -r line; do
        
            # Look for the vulnerability line (pattern: Vulnerability #<number>: <ID>)
            if [[ "$line" =~ Vulnerability\ #[0-9]+:\ ([A-Za-z0-9-]+) ]]; then
              vuln_name="${BASH_REMATCH[0]}"
              vuln_id="${BASH_REMATCH[1]}"
              # Save the vulnerability name for later
              #current_vuln="$vuln_name"
              current_vuln=$(echo $vuln_name | sed 's/.*: //')
            fi
          
            # Look for the line that contains the "More info" link
            if [[ "$line" =~ More\ info:\ (https://pkg.go.dev/vuln/[A-Za-z0-9-]+) ]]; then
              vuln_link="${BASH_REMATCH[1]}"
              # Output the markdown format: [Vulnerability Title](Link)
              echo "  - [$current_vuln]($vuln_link)" >> $GWY_SUMMARY
            fi
        
          done < "$GWY_ARTIFACT"
            
        else
          # add not found vulnerabilities annotation
          echo "::notice title=$GWY_TITLE::no vulnerabilities found in codebase"

          # add not found vulnerabilities to action summary
          echo "  - no vulnerabilities found :)" >> $GWY_SUMMARY
        fi

        cat $GWY_SUMMARY >> $GITHUB_STEP_SUMMARY

    - name: Upload Vulnerability Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: vulnerabilities-report
        path: ${{ env.GWY_ARTIFACT }}
      continue-on-error: true

    - name: Step Clean-Up
      if: always()
      shell: bash
      run: |
        # Vulnerabilities Scanning Clean-Up
        rm $GWY_ARTIFACT
        rm $GWY_SUMMARY
        
        # unset variables
        unset GWY_TITLE
        unset GWY_SUMMARY
        unset GWY_ARTIFACT
        unset GWY_PIPELINE_STATUS
        unset GWY_TIMEOUT_SECONDS
        unset GWY_VULNERABILITIES_COUNT
        unset GWY_VULNERABILITIES_FOUND
