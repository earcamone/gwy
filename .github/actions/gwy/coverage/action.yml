name: 'Unit Tests & Coverage'
description: 'Runs Go tests, checks coverage and updates badge'

inputs:
  threshold:
    description: 'Minimum coverage threshold (%)'
    required: true

  token:
    description: 'GitHub token for pushing badges'
    required: false

outputs:
  result:
    description: 'Result of the coverage check (success or failed)'
    value: ${{ steps.check-coverage.outputs.result }}

runs:
  using: 'composite'
  steps:
    - name: Run Tests with Coverage
      shell: bash
      run: |
        # Running unit tests and coverage

        # set annotations reusable title
        echo "GWY_TITLE=coverage threshold check" >> $GITHUB_ENV
        
        # run unit tests and generate coverage report
        timeout $GWY_TIMEOUT_SECONDS go test ./... -coverprofile=cover.out -covermode=atomic -coverpkg=./...
        
        # Parsing coverage results
        timeout $GWY_TIMEOUT_SECONDS go tool cover -func=cover.out | grep "total:" | awk '{print "Total Coverage: " $3}'
        echo "GWY_COVERAGE=$(go tool cover -func=cover.out | grep 'total:' | awk '{print $3}' | sed 's/%//' | xargs printf "%.0f")" >> $GITHUB_ENV

    - name: Check Coverage Threshold
      id: check-coverage
      continue-on-error: true

      shell: bash
      run: |
        # Checking Coverage Threshold
        GWY_THRESHOLD=${{ inputs.threshold }}
        GWY_TOTAL_COVERAGE=${{ env.GWY_COVERAGE }}
        
        if (( $(echo "$GWY_TOTAL_COVERAGE < $GWY_THRESHOLD" | bc -l) )); then
          echo "::error title=$GWY_TITLE: NOT MET::coverage ($GWY_TOTAL_COVERAGE%) is below threshold ($GWY_THRESHOLD%)"
          echo "Coverage ($GWY_TOTAL_COVERAGE%) is below threshold ($GWY_THRESHOLD%)"
          echo "result=failed" >> $GITHUB_OUTPUT
        else
          echo "::notice title=$GWY_TITLE: success::coverage ($GWY_TOTAL_COVERAGE%) meets threshold ($GWY_THRESHOLD%)"
          echo "congratulations! coverage ($GWY_TOTAL_COVERAGE%) meets threshold ($GWY_THRESHOLD%)"
          echo "result=success" >> $GITHUB_OUTPUT
        fi

    # TODO:
    #  - make badges generation condition configurable by client
    #  - check badge creation error

    - name: Generate Coverage Badge
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      continue-on-error: true

      shell: bash
      run: |
        # Generating Coverage Badge
        GWY_COLOR="red"
        
        if (( $(echo "$GWY_COVERAGE >= 90" | bc -l) )); then GWY_COLOR="green"
        elif (( $(echo "$GWY_COVERAGE >= 80" | bc -l) )); then GWY_COLOR="yellow"
        elif (( $(echo "$GWY_COVERAGE >= 70" | bc -l) )); then GWY_COLOR="orange"
        fi
        
        curl -s "https://img.shields.io/badge/Coverage-$GWY_COVERAGE%25-$GWY_COLOR" > badge.svg

    - name: Store Badge in GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      continue-on-error: true

      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ inputs.token }} # Swap to inputs
        publish_dir: .
        keep_files: true
        destination_dir: badges
        commit_message: "Update coverage badge [skip ci]"

    - name: Add Coverage Summary to Job
      if: always()
      continue-on-error: true

      shell: bash
      run: |
        # Generating Coverage Summary
        echo "## Code Coverage" >> $GITHUB_STEP_SUMMARY
        timeout $GWY_TIMEOUT_SECONDS go tool cover -func=cover.out | grep -v "total:" >> $GITHUB_STEP_SUMMARY
                
        if [ ${{ env.GWY_COVERAGE }} -lt ${{ inputs.threshold }} ]; then
          echo "  - FAILED: ${{ env.GWY_COVERAGE }}% Coverage" >> $GITHUB_STEP_SUMMARY
        else
          echo "  - SUCCESS: ${{ env.GWY_COVERAGE }}% Coverage" >> $GITHUB_STEP_SUMMARY
        fi

        cp $GITHUB_STEP_SUMMARY coverage-report.md

    - name: Upload Coverage Summary Artifact
      if: always()
      continue-on-error: true

      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report.md

    - name: Action clean-up
      shell: bash
      run: |
        # Cleaning Action Environment
        unset GWY_TITLE
        unset GWY_COLOR
        unset GWY_COVERAGE
        unset GWY_THRESHOLD
        unset GWY_TOTAL_COVERAGE
        
        rm cover.out
        rm coverage-report.md
