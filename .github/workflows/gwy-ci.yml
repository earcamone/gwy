
name: 'GWY/CI'

env:
  # Go version the CI should use to run actions?
  # <CURRENT> defaults to branch go.mod one.
  GWY_GO_VERSION: "<CURRENT>"

  # Should the CI allow PRs merging if any
  # of the following enabled actions fail?
  GWY_ALLOW_MERGE_ON_FAILURE: false

  # Individual Steps Timeout: set the TO for
  # each individual action that might take time
  GWY_TIMEOUT: '5m'

  # Test & Coverage Scan? set true if you want
  # CI to run tests and coverage in the code
  GWY_TESTS: true

  # Test Coverage Threshold: set coverage
  # threshold to fail or not the check
  GWY_TESTS_THRESHOLD: '90'

  # Vulnerabilities Scan? set true if you want
  # CI to check vulnerabilities in your code
  GWY_VULNERABILITIES: true

  # Code Hardcoded Secrets Scan? set true if you
  # want CI to scan code for hardcoded secrets
  GWY_SECRETS: true

  # Outdated Dependencies Scan? set true if you want
  # CI to check for imported outdated dependencies
  GWY_DEPENDENCIES: true

  # Outdated Dependencies Scan Automatic Fixes? set
  # true if you want CI to automatically fix the
  # issues found, creating a PR with the changes.
  GWY_DEPENDENCIES_PR: true

  # Code Format (gofmt) Scan? set true if you want
  # CI to check for code format issues in the code
  GWY_GOFMT: true

  # Code Format (gofmt) Scan Automatic Fixes? set
  # true if you want CI to automatically fix the
  # issues found, creating a PR with the changes.
  GWY_GOFMT_PR: true

  # Code Linting Scan? set true if you want CI to
  # scan for linting issues in your codebase
  GWY_LINT: true

  # Target branch over which apply action? DON'T
  # CHANGE unless you know what you are doing :)
  #
  # When running manually a workflow, you can
  # specify the target branch over which apply
  # it, if CI is run by an "on event", it will
  # be applied over the branch triggering it :)
  BRANCH:  ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref }}

#
# Enhance the triggering events with what fits better
# your development cycle, I personally like to block
# any repo merge that doesn't come from a PR :P
#

on:
  pull_request:
    branches:
      - '*'

  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to apply CI'
        required: true
        default: "<CURRENT>"

      go-version:
        description: 'Go version'
        required: true
        default: '<CURRENT>'

      timeout:
        description: 'Timeout (per step)'
        type: string
        default: '5m'

      tests:
        description: 'Run tests and coverage?'
        type: boolean
        default: true

      secrets:
        description: 'Run secrets scan?'
        type: boolean
        default: true

      dependencies:
        description: 'Run dependencies scan?'
        type: boolean
        default: true

      vulnerabilities:
        description: 'Run vulnerabilities scan?'
        type: boolean
        default: true

      gofmt:
        description: 'Run code format scan?'
        type: boolean
        default: true

      golint:
        description: 'Run code linting scan?'
        type: boolean
        default: true

      create_pr:
        description: 'Create PR with fixes when possible?'
        type: boolean
        default: true

jobs:
  gwy-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Setting Manual CI Run Configuration
        if: github.repository != 'earcamone/gwy' && github.event_name == 'workflow_dispatch'
        run: |
          # Setting Workflow Main Configuration
          
          # fail fast if client forgot to configure GWY repo token
          
          if [ "${{ secrets.GWY_TOKEN_REPO }}" = "" ]; then
            echo "::error title=configuration error::missing GWY_TOKEN_REPO repo access secret, please check installation section in documentation"
            exit 1
          fi

          #
          # This block simply overwrittes the CI config
          # options with the ones specified by client
          # when running it manually.
          #
          
          if [ "${{ inputs.branch }}" = "<CURRENT>" ]; then
            echo "BRANCH=${{ github.ref }}" >> $GITHUB_ENV
          else
            echo "BRANCH=${{ inputs.branch }}" >> $GITHUB_ENV
          fi
          
          # Overwrite environment variables with inputs if
          # CI was called with a workflow_dispatch event.

          echo "GWY_TIMEOUT=${{ inputs.timeout }}" >> $GITHUB_ENV
          echo "GWY_CREATE_PR=${{ inputs.create_pr }}" >> $GITHUB_ENV
          echo "GWY_GO_VERSION=${{ inputs.go-version }}" >> $GITHUB_ENV
          
          echo "GWY_LINT=${{ inputs.lint }}" >> $GITHUB_ENV
          echo "GWY_TESTS=${{ inputs.tests }}" >> $GITHUB_ENV
          echo "GWY_SECRETS=${{ inputs.secrets }}" >> $GITHUB_ENV          
          echo "GWY_VULNERABILITIES=${{ inputs.vulnerabilities }}" >> $GITHUB_ENV
          
          echo "GWY_GOFMT=${{ inputs.gofmt }}" >> $GITHUB_ENV
          echo "GWY_GOFMT_PR=${{ inputs.create_pr }}" >> $GITHUB_ENV

          echo "GWY_DEPENDENCIES=${{ inputs.dependencies }}" >> $GITHUB_ENV  
          echo "GWY_DEPENDENCIES_PR=${{ inputs.create_pr }}" >> $GITHUB_ENV          

      - name: Checkout Code
        if: github.repository != 'earcamone/gwy'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.BRANCH }}
          token: ${{ secrets.GWY_TOKEN_REPO }}

      - name: Setup Environment
        if: github.repository != 'earcamone/gwy'
        uses: ./.github/actions/gwy/setup
        with:
          timeout: ${{ env.GWY_TIMEOUT }}
          go-version: ${{ env.GWY_GO_VERSION }}

      - name: Unit Tests & Coverage
        id: check-coverage
        continue-on-error: true

        if: github.repository != 'earcamone/gwy' && env.GWY_TESTS == 'true'
        uses: ./.github/actions/gwy/coverage
        with:
          token: ${{ secrets.GWY_TOKEN_REPO }}
          threshold: ${{ env.GWY_TESTS_THRESHOLD }}

      - name: Secrets Scan
        id: check-secrets
        continue-on-error: true
        if: github.repository != 'earcamone/gwy' && env.GWY_SECRETS == 'true'
        uses: ./.github/actions/gwy/secrets

      - name: Dependencies Scan
        id: check-dependencies
        continue-on-error: true

        if: github.repository != 'earcamone/gwy' && env.GWY_DEPENDENCIES == 'true'
        uses: ./.github/actions/gwy/dependencies
        with:
          token: ${{ secrets.GWY_TOKEN_REPO }}
          create-pr:  ${{ env.GWY_CREATE_PR }}

      - name: Vulnerabilities Scan
        id: check-vulnerabilities
        continue-on-error: true

        if: github.repository != 'earcamone/gwy' && env.GWY_VULNERABILITIES == 'true'
        uses: ./.github/actions/gwy/vulnerabilities

      - name: Code Format (gofmt) Scan
        id: check-gofmt
        continue-on-error: true

        if: github.repository != 'earcamone/gwy' && env.GWY_GOFMT == 'true'
        uses: ./.github/actions/gwy/gofmt
        with:
          token: ${{ secrets.GWY_TOKEN_REPO }}
          create-pr:  ${{ env.GWY_CREATE_PR }}

      - name: Code Linting Scan
        id: check-golint
        continue-on-error: true

        if: github.repository != 'earcamone/gwy' && env.GWY_GOFMT == 'true'
        uses: ./.github/actions/gwy/golint
        with:
          token: ${{ secrets.GWY_TOKEN_REPO }}

      - name: CI Pipeline Result
        if: github.repository != 'earcamone/gwy' && env.GWY_ALLOW_MERGE_ON_FAILURE == 'false'

        shell: bash
        run: |
          # determine PR merge block based in actions failure and config  
          
          if [ "${{ steps.check-secrets.outputs.result }}" != "success" ]; then
            exit 1
          fi
          
          if [ "${{ steps.check-gofmt.outputs.result }}" != "success" ]; then
            exit 1
          fi

          if [ "${{ steps.check-golint.outputs.result }}" != "success" ]; then
            exit 1
          fi          
          
          if [ "${{ steps.check-coverage.outputs.result }}" != "success" ]; then
            exit 1
          fi

          if [ "${{ steps.check-dependencies.outputs.result }}" != "success" ]; then
            exit 1
          fi

          if [ "${{ steps.check-vulnerabilities.outputs.result }}" != "success" ]; then
            exit 1
          fi
